<% if fetch(:app_server) && (fetch(:app_server_socket) || fetch(:app_server_port))%>
    # Define App Server Upstream
    upstream <%= fetch(:application) %>-app-server {
    <% if fetch(:app_server_socket) %>
        server unix:<%= fetch(:app_server_socket) %> fail_timeout=0;
    <% elsif fetch(:app_server_port) %>
        server <%= fetch(:app_server_host, '127.0.0.1') %>:<%= fetch(:app_server_port) %> fail_timeout=0;
    <% end %>
    }
<% end %>

proxy_cache_path <%= fetch(:deploy_to) %>/shared/nginx_cache levels=1:2 keys_zone=cache-<%= fetch(:application) %>:8m max_size=1000m inactive=600m;

# HTTP Server

<% if fetch(:nginx_use_ssl) %>
    server {
    listen 80;
    server_name <%= fetch(:nginx_domains) %>;
    rewrite ^(.*) https://$host$1 permanent;
    }
<% end %>

<% if fetch(:redirect_address_without_www) %>

    server {
    listen 80;
    server_name <%= fetch(:nginx_domains).split(' ').first.gsub('www.', '') %>;
    rewrite ^(.*) http://<%= fetch(:nginx_domains).split(' ').first %>$1 permanent;
    }

    <% if fetch(:nginx_use_ssl) %>
        server {
        listen 443 ssl;
        ssl on;
        ssl_certificate <%= fetch(:nginx_ssl_certificate_path) %>/<%= fetch(:nginx_ssl_certificate) %>;
        ssl_certificate_key <%= fetch(:nginx_ssl_certificate_key_path) %>/<%= fetch(:nginx_ssl_certificate_key) %>;

        server_name <%= fetch(:nginx_domains).split(' ').first.gsub('www.', '') %>;
        rewrite ^(.*) https://<%= fetch(:nginx_domains).split(' ').first %>$1 permanent;
        }
    <% end %>
<% end %>

server {

<% if fetch(:nginx_use_ssl) %>
    listen 443 ssl http2;
    ssl on;
    ssl_certificate <%= fetch(:nginx_ssl_certificate_path) %>/<%= fetch(:nginx_ssl_certificate) %>;
    ssl_certificate_key <%= fetch(:nginx_ssl_certificate_key_path) %>/<%= fetch(:nginx_ssl_certificate_key) %>;
    ssl_dhparam <%= fetch(:nginx_dhparam_path) %>/<%= fetch(:nginx_dhparam) %>;   # Create a new one with: openssl dhparam -out dhparams.pem 2048
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  # donâ€™t use SSLv3 ref: POODLE
    # BE CAREFUL: with the following ssl_ciphers IE8 is not supported!
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    # With the following ssl_ciphers IE8 is supported, but system will be less secure.
    #ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA";

    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate <%= fetch(:nginx_ssl_certificate_ca_path) %>/<%= fetch(:nginx_ssl_certificate_ca) %>;
    resolver 8.8.4.4 8.8.8.8 valid=300s;
    resolver_timeout 10s;

    ssl_session_cache shared:SSL:32m;
    ssl_buffer_size 8k;
    ssl_session_timeout 10m;
<% else %>
    listen 80;
<% end %>

server_tokens off;

server_name <%= fetch(:nginx_domains) %>;
root        <%= fetch(:deploy_to) %>/current/<%= fetch(:nginx_static_dir) %>;

access_log <%= fetch(:nginx_log_path) %>/nginx-access.log;
error_log  <%= fetch(:nginx_log_path) %>/nginx-error.log;

error_page 404 /404.html;
location /404.html { root <%= fetch(:deploy_to) %>/current/<%= fetch(:nginx_static_dir) %>; }

error_page 500 /500.html;
location /500.html { root <%= fetch(:deploy_to) %>/current/<%= fetch(:nginx_static_dir) %>; }

keepalive_timeout 5;
client_max_body_size 2G;
client_body_in_file_only clean;
client_body_buffer_size 32K;
sendfile on;
send_timeout 300s;

<% if fetch(:app_server) && (fetch(:app_server_socket) || fetch(:app_server_port))%>
    location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
    }

    try_files $uri/index.html $uri @<%= fetch(:application) %>-app-server;

    location @<%= fetch(:application) %>-app-server {
    proxy_cache cache-<%= fetch(:application) %>;
    proxy_cache_use_stale error updating timeout;
    #proxy_cache_lock on;     # Prevent a "cache stampede" from happening when cache entries expire (use only with VERY VERY high load).
    add_header X-Cache-Status $upstream_cache_status; # Returns HIT or MISS so we can observe the cache behaviour.
    proxy_ignore_headers "Set-Cookie";

    gzip on;
    gzip_min_length  1100;
    gzip_buffers  4 32k;
    gzip_comp_level 4;
    gzip_types    text/plain application/x-javascript text/xml text/css application/json;
    gzip_vary on;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #proxy_set_header Host $http_host;
    proxy_set_header Host $host;
    <% if fetch(:nginx_use_ssl) %>
        proxy_set_header X-Forwarded-Proto https;
    <% else %>
        proxy_set_header X-Forwarded-Proto http;
    <% end %>

    # Pass caching headers to Rails, otherwise ConditionalGet doesn't work.
    proxy_set_header If-Modified-Since $http_if_modified_since;
    proxy_set_header If-None-Match $http_if_none_match;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://<%= fetch(:application) %>-app-server;
    }
<% end %>
}